{"version":3,"sources":["scripts/algorithms/char-frequency/_calc-frequency.ts","scripts/algorithms/char-frequency/calc-char-pair-frequency.ts","scripts/algorithms/char-frequency/calc-char-frequency.ts","index.ts"],"names":[],"mappings":";;;AACA,aAAA,SAAwB,EAAe,GAC9B,IAAA,EAAgC,IAAI,IACpC,EAAoC,IAAI,IAcvC,OAZP,EAAI,QAAQ,SAAC,GACN,EAAS,IAAI,GACd,EAAS,IAAI,EAAM,EAAS,IAAI,GAAQ,GAExC,EAAS,IAAI,EAAM,KAIzB,EAAS,QAAQ,SAAC,EAAO,GACtB,EAAa,GAAO,EAAQ,EAAI,SAG5B,EAhBV,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;ACuBC,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAxBD,IAAA,EAAA,EAAA,QAAA,sBAOA,SAAwB,EAAsB,GAErC,IAAA,EAAQ,EADd,EAAO,EAAK,cAAc,QAAQ,mBAAoB,KAG/C,OAAA,EAAA,QAAe,GAGzB,SAAS,EAAQ,GAKT,IAJC,IAAA,EAAQ,EAAK,MAAM,IACnB,EAAkB,GAClB,EAAM,EAAM,OAET,EAAI,EAAG,EAAI,EAAM,EAAG,IAC1B,EAAM,KAAK,EAAM,GAAK,EAAM,EAAI,IAG5B,OAAA,EAhBV,QAAA,QAAA;;ACoCC,aAAA,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA3CD,IAAA,EAAA,EAAA,QAAA,sBASM,EAA2C,CAC9C,YAAY,EACZ,QAAQ,EACR,QAAQ,EACR,aAAa,GAShB,SAAwB,EAAkB,EAAc,GAI9C,OAFP,EAAO,EAAY,EADnB,EAAO,EAAA,EAAA,GAAQ,GAA0B,IAGlC,EAAA,QAAe,EAAK,MAAM,KAGpC,SAAS,EAAY,EAAc,GACxB,IAAA,EAAA,EAAA,WAAY,EAAA,EAAA,OAAQ,EAAA,EAAA,OAAQ,EAAA,EAAA,YAY7B,OAVP,EAAO,EAAK,OAER,IAAY,EAAO,EAAK,eACvB,IAAQ,EAAO,EAAK,QAAQ,OAAQ,KACpC,IAAQ,EAAO,EAAK,QAAQ,OAAQ,KAEpC,IACF,EAAO,EAAK,QAAQ,gCAAiC,KAGjD,EApBV,QAAA,QAAA;;ACZM,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAVN,QAAA,iCACA,QAAA,gBAEA,IAAA,EAAA,EAAA,QAAA,iEACA,EAAA,EAAA,QAAA,4DAEM,EAAmC,GACzC,EAAE,KAAO,SAAS,cAAc,QAE1B,OAAQ,kBAAoB,EAAA,QAC5B,OAAQ,sBAAwB,EAAA","file":"src.843889f8.js","sourceRoot":"../src","sourcesContent":["\nexport default function _calcFrequency(arr: any[]): Map<string, number> {\n   const charsMap: Map<string, number> = new Map();\n   const frequencyMap: Map<string, number> = new Map();\n\n   arr.forEach((char) => {\n      if (charsMap.has(char)) {\n         charsMap.set(char, charsMap.get(char) + 1);\n      } else {\n         charsMap.set(char, 1);\n      }\n   });\n\n   charsMap.forEach((value, key) => {\n      frequencyMap[key] = value / arr.length;\n   });\n\n   return frequencyMap;\n}","import _calcFrequency from \"./_calc-frequency\";\n\n/**\n * Calculate frequency of two-character sequences in the text\n * @param text\n * @returns map of two-character sequences and its frequency (in range [0, 1])\n */\nexport default function calcCharPairFrequency(text: string): Map<string, number> {\n   text = text.toLowerCase().replace(/[^a-zа-яёїієґ]+/g, '');\n   const pairs = toPairs(text);\n\n   return _calcFrequency(pairs);\n}\n\nfunction toPairs(text: string): string[] {\n   const chars = text.split('');\n   const pairs: string[] = [];\n   const len = chars.length;\n\n   for (let i = 0; i < len - 1; i++) {\n      pairs.push(chars[i] + chars[i + 1]);\n   }\n\n   return pairs;\n}","import _calcFrequency from \"./_calc-frequency\";\n\ninterface IFrequencyOptions {\n   ignoreCase: boolean;\n   spaces: boolean;\n   digits: boolean;\n   punctuation: boolean;\n}\n\nconst DEF_FREQUENCY_OPTIONS: IFrequencyOptions = {\n   ignoreCase: true,\n   spaces: false,\n   digits: false,\n   punctuation: false,\n}\n\n/**\n * Calculate character frequency in the text\n * @param text\n * @param options\n * @returns map of characters and character frequency (in range [0, 1])\n */\nexport default function calcCharFrequency(text: string, options: IFrequencyOptions): Map<string, number> {\n   options = { ...DEF_FREQUENCY_OPTIONS, ...options };\n   text = prepareText(text, options);\n\n   return _calcFrequency(text.split(''));\n}\n\nfunction prepareText(text: string, options: IFrequencyOptions): string {\n   const { ignoreCase, spaces, digits, punctuation } = options;\n\n   text = text.trim();\n\n   if (ignoreCase) text = text.toLowerCase();\n   if (!spaces) text = text.replace(/\\s+/g, '')\n   if (!digits) text = text.replace(/\\d+/g, '');\n\n   if (!punctuation) {\n      text = text.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]+/g, '');\n   }\n\n   return text;\n}","import 'normalize.scss/normalize.scss';\nimport './index.scss';\n\nimport calcCharPairFrequency from './scripts/algorithms/char-frequency/calc-char-pair-frequency';\nimport calcCharFrequency from './scripts/algorithms/char-frequency/calc-char-frequency';\n\nconst $: {[type: string]: HTMLElement} = {};\n$.root = document.querySelector('.app');\n\n(<any>window).calcCharFrequency = calcCharFrequency; \n(<any>window).calcCharPairFrequency = calcCharPairFrequency; "]}